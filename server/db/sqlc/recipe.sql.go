// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: recipe.sql

package db

import (
	"context"
)

const createRecipe = `-- name: CreateRecipe :one

INSERT INTO "Recipe" (
	id, name , description, image, url, time, servings 
) VALUES (
	$1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, description, image, active, time, url, servings, created_at
`

type CreateRecipeParams struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Image       string `json:"image"`
	Url         string `json:"url"`
	Time        string `json:"time"`
	Servings    int32  `json:"servings"`
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Image,
		arg.Url,
		arg.Time,
		arg.Servings,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.Active,
		&i.Time,
		&i.Url,
		&i.Servings,
		&i.CreatedAt,
	)
	return i, err
}

const getRecipes = `-- name: GetRecipes :many
SELECT id, name, description, image, active, time, url, servings, created_at FROM "Recipe"
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetRecipesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetRecipes(ctx context.Context, arg GetRecipesParams) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, getRecipes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Recipe{}
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Image,
			&i.Active,
			&i.Time,
			&i.Url,
			&i.Servings,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
