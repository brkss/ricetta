// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: recipe_category.sql

package db

import (
	"context"
)

const createRecipeCategory = `-- name: CreateRecipeCategory :one
INSERT INTO "RecipeCategory" (
	id, title, image
) VALUES (
	$1, $2, $3
) RETURNING id, title, image, active
`

type CreateRecipeCategoryParams struct {
	ID    string `json:"id"`
	Title string `json:"title"`
	Image string `json:"image"`
}

func (q *Queries) CreateRecipeCategory(ctx context.Context, arg CreateRecipeCategoryParams) (RecipeCategory, error) {
	row := q.db.QueryRowContext(ctx, createRecipeCategory, arg.ID, arg.Title, arg.Image)
	var i RecipeCategory
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Image,
		&i.Active,
	)
	return i, err
}

const getCategories = `-- name: GetCategories :many
SELECT id, title, image, active FROM "RecipeCategory"
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetCategories(ctx context.Context, arg GetCategoriesParams) ([]RecipeCategory, error) {
	rows, err := q.db.QueryContext(ctx, getCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RecipeCategory{}
	for rows.Next() {
		var i RecipeCategory
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Image,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
